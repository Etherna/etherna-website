---
import { SlateDescendant } from "@mattiaz9/slate-jsx"
import { Text } from "slate"

import CodeBlock from "./text-blocks/code-block.astro"
import HeadingBlock from "./text-blocks/heading-block.astro"
import ImageBlock from "./text-blocks/image-block.astro"
import Leaf from "./text-blocks/leaf.astro"
import ListBlock from "./text-blocks/list-block.astro"
import ListItemBlock from "./text-blocks/list-item-block.astro"
import ParagraphBlock from "./text-blocks/paragraph-block.astro"
import QuoteBlock from "./text-blocks/quote-block.astro"
import TableBlock from "./text-blocks/table-block.astro"
import TableCellBlock from "./text-blocks/table-cell-block.astro"
import TableRowBlock from "./text-blocks/table-row-block.astro"

import type * as BlocksTypes from "slate-blocks/textual"

interface Props {
  children: SlateDescendant[]
}

const { children } = Astro.props
---

{
  children.map(block => {
    if (Text.isText(block)) return <Leaf {...block} />

    switch (block.type) {
      case "p":
        return (
          <ParagraphBlock {...(block as BlocksTypes.ParagraphElement)}>
            <Astro.self children={block.children} />
          </ParagraphBlock>
        )
      case "h1":
      case "h2":
      case "h3":
      case "h4":
      case "h5":
      case "h6":
        return (
          <HeadingBlock {...(block as BlocksTypes.HeadingElement)}>
            <Astro.self children={block.children} />
          </HeadingBlock>
        )
      case "li":
        return (
          <ListItemBlock {...(block as unknown as BlocksTypes.ListItemElement)}>
            <Astro.self children={block.children} />
          </ListItemBlock>
        )
      case "ul":
      case "ol":
        return (
          <ListBlock {...(block as BlocksTypes.ListElement)}>
            <Astro.self children={block.children} />
          </ListBlock>
        )
      case "code":
        return (
          <CodeBlock {...(block as BlocksTypes.CodeElement)}>
            <Astro.self children={block.children} />
          </CodeBlock>
        )
      case "blockquote":
        return (
          <QuoteBlock {...(block as BlocksTypes.QuoteElement)}>
            <Astro.self children={block.children} />
          </QuoteBlock>
        )
      case "table":
        return (
          <TableBlock {...(block as BlocksTypes.TableElement)}>
            <Astro.self children={block.children} />
          </TableBlock>
        )
      case "tr":
        return (
          <TableRowBlock {...(block as BlocksTypes.TableRowElement)}>
            <Astro.self children={block.children} />
          </TableRowBlock>
        )
      case "th":
      case "td":
        return (
          <TableCellBlock {...(block as BlocksTypes.TableCellElement)}>
            <Astro.self children={block.children} />
          </TableCellBlock>
        )
      case "img":
        return <ImageBlock {...(block as BlocksTypes.ImageElement)} />
      default:
        return null
    }
  })
}
