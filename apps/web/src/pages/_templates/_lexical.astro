---
import { CodeBlock } from "@/components/blocks/code-block"
import { Document } from "@/components/common/document"
import { Image } from "@/components/common/image"
import {
  IS_BOLD,
  IS_CODE,
  IS_HIGHLIGHT,
  IS_ITALIC,
  IS_STRIKETHROUGH,
  IS_SUBSCRIPT,
  IS_SUPERSCRIPT,
  IS_UNDERLINE,
} from "@/lib/lexical"

import type { BundledUploadFields } from "@/lib/bundle"
import type { NodeType } from "@/lib/lexical"
import type { DefaultNodeTypes } from "@payloadcms/richtext-lexical"

interface Props {
  nodes: NodeType[]
}
---

{
  Astro.props.nodes.map((node) => {
    if (node == null) {
      return null
    }

    if (node.type === "text") {
      let text = node.text

      if (node.format & IS_BOLD) {
        text = <strong>{text}</strong>
      }
      if (node.format & IS_ITALIC) {
        text = <em>{text}</em>
      }
      if (node.format & IS_STRIKETHROUGH) {
        text = <span style={{ textDecoration: "line-through" }}>{text}</span>
      }
      if (node.format & IS_UNDERLINE) {
        text = <span style={{ textDecoration: "underline" }}>{text}</span>
      }
      if (node.format & IS_CODE) {
        text = <code>{node.text}</code>
      }
      if (node.format & IS_SUBSCRIPT) {
        text = <sub>{text}</sub>
      }
      if (node.format & IS_SUPERSCRIPT) {
        text = <sup>{text}</sup>
      }
      if (node.format & IS_HIGHLIGHT) {
        text = <mark>{text}</mark>
      }

      return text
    }

    if (node.type === "block") {
      const block = node.fields

      const blockType = block?.blockType

      if (!block || !blockType) {
        return null
      }

      switch (blockType) {
        case "code":
          return <CodeBlock {...block} />
        default:
          return null
      }
    }

    switch (node.type) {
      case "linebreak": {
        return <br />
      }
      case "paragraph": {
        return (
          <p>
            <Astro.self nodes={node.children as DefaultNodeTypes[]} />
          </p>
        )
      }
      case "heading": {
        const Tag = node?.tag
        return (
          <Tag>
            <Astro.self nodes={node.children as DefaultNodeTypes[]} />
          </Tag>
        )
      }
      case "list": {
        const Tag = node?.tag
        return (
          <Tag>
            <Astro.self nodes={node.children as DefaultNodeTypes[]} />
          </Tag>
        )
      }
      case "listitem": {
        if (node?.checked != null) {
          return (
            <li
              aria-checked={node.checked ? "true" : "false"}
              class={` ${node.checked ? "" : ""}`}
              role="checkbox"
              tabindex={-1}
              value={node?.value}
            >
              <Astro.self nodes={node.children as DefaultNodeTypes[]} />
            </li>
          )
        } else {
          return (
            <li value={node?.value}>
              <Astro.self nodes={node.children as DefaultNodeTypes[]} />
            </li>
          )
        }
      }
      case "quote": {
        return (
          <blockquote>
            <Astro.self nodes={node.children as DefaultNodeTypes[]} />
          </blockquote>
        )
      }
      case "link": {
        const fields = node.fields

        return (
          <a href={fields.url} target={fields.newTab ? "_blank" : undefined}>
            <Astro.self nodes={node.children as DefaultNodeTypes[]} />
          </a>
        )
      }
      case "upload": {
        const fields = node.fields as BundledUploadFields

        if (fields.image) {
          return <Image image={fields.image} />
        } else if (fields.file) {
          return <Document file={fields.file} />
        }

        return null
      }

      default:
        return null
    }
  })
}
