---
import Root from "./_root.astro"
import {
  BlogCategories,
  BlogCategoriesItem,
  BlogCategoriesLink,
} from "@/components/blog/blog-categories"
import { BlogHeader, BlogTitle } from "@/components/blog/blog-header"
import {
  BlogPostDate,
  BlogPosts,
  BlogPostsItem,
  BlogPostsLink,
  BlogPostsThumbnail,
  BlogPostTitle,
} from "@/components/blog/blog-posts"
import { PostAuthors, PostAuthorsItem } from "@/components/blog/post-authors"
import { blogDictionary } from "@/lang/dictionaries/blog"
import { t } from "@/lang/t"
import { route } from "@/lib/routes"
import { fetchBlog } from "@/queries/fetch-blog"
import { PAGINATION_LIMIT } from "@/queries/fetch-paths"

import type { Locale } from "@/lang/types"
import type { Media, User } from "@payload-types"

interface Props {
  id: string
  path: string
  locale: Locale
  category?: string
  page?: number
}

const { locale, page, category, path } = Astro.props

const { posts, categories, localizedPaths } = await fetchBlog({
  categorySlug: category,
  locale,
  page,
  limit: PAGINATION_LIMIT,
})
---

<Root
  title={t(blogDictionary.pageTitle, { locale })}
  description={t(blogDictionary.pageDescription, { locale })}
  locale={locale}
  path={path}
  localizedPaths={localizedPaths}
>
  <BlogHeader>
    <BlogTitle>Blog</BlogTitle>
    <BlogCategories>
      {
        categories.docs.map((category) => (
          <BlogCategoriesItem>
            <BlogCategoriesLink
              href={route("/blog/category/:category", { category: category.slug ?? "-" })}
            >
              {category.title}
            </BlogCategoriesLink>
          </BlogCategoriesItem>
        ))
      }
    </BlogCategories>

    <BlogPosts>
      {
        posts.docs.map((post) => (
          <BlogPostsItem>
            <BlogPostsLink href={route("/blog/:slug", { slug: post.slug ?? "-" })}>
              <BlogPostsThumbnail />
              <BlogPostTitle>{post.title}</BlogPostTitle>
              {post.authors && (
                <PostAuthors>
                  {(post.authors as User[]).map((author) => (
                    <PostAuthorsItem
                      name={author.name ?? author.id}
                      role={author.role}
                      avatar={(author.avatar as Media)?.bundled?.image}
                    />
                  ))}
                </PostAuthors>
              )}
              <BlogPostDate>{post.publishedAt}</BlogPostDate>
            </BlogPostsLink>
          </BlogPostsItem>
        ))
      }
    </BlogPosts>
  </BlogHeader>
</Root>
