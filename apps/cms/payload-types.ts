/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    pages: Page;
    posts: Post;
    categories: Category;
    jobs: Job;
    media: Media;
    users: User;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    jobs: JobsSelect<false> | JobsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
    company: Company;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    company: CompanySelect<false> | CompanySelect<true>;
  };
  locale: 'en' | 'it';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    title?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    badges?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'redirects';
                  value: string | Redirect;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: 'badge' | null;
          };
          id?: string | null;
        }[]
      | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'redirects';
                  value: string | Redirect;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (string | null) | Media;
    backgroundImage?: (string | null) | Media;
  };
  layout?:
    | (
        | TextBlock
        | ProseBlock
        | CtaBlock
        | MilestonesBlock
        | ClientsBlock
        | FeaturesBlock
        | AwardsBlock
        | StatsBlock
        | GridBlock
        | BentoBlock
        | TestimonialsBlock
        | FAQBlock
        | TeamBlock
        | RelatedPostsBlock
        | FormBlock
        | BrandBlock
        | JobsBlock
      )[]
    | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  publishedAt?: string | null;
  parent?: (string | null) | Page;
  breadcrumbs?:
    | {
        doc?: (string | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  publishedAt?: string | null;
  editedAt?: string | null;
  thumbnail?: (string | null) | Media;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
        avatar?: (string | null) | Media;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  color?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  thumbhash?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  firstName: string;
  lastName: string;
  avatar?: (string | null) | Media;
  role?: string | null;
  policies: ('postsEditor' | 'postsContributor' | 'webDesigner' | 'administrator')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock".
 */
export interface TextBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'text';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProseBlock".
 */
export interface ProseBlock {
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'prose';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CtaBlock".
 */
export interface CtaBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'redirects';
                value: string | Redirect;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  media?: (string | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MilestonesBlock".
 */
export interface MilestonesBlock {
  title?: string | null;
  type: 'timeline' | 'roadmap';
  items: {
    title: string;
    date: string;
    status: 'completed' | 'active' | 'upcoming';
    text?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    media?: (string | null) | Media;
    id?: string | null;
  }[];
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'mlst';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ClientsBlock".
 */
export interface ClientsBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  clients: {
    logo: string | Media;
    link?: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null)
        | ({
            relationTo: 'redirects';
            value: string | Redirect;
          } | null);
      url?: string | null;
    };
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'clients';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturesBlock".
 */
export interface FeaturesBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  items: {
    title?: string | null;
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    icon?: (string | null) | Media;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'features';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AwardsBlock".
 */
export interface AwardsBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  awards: {
    issuer: string;
    name: string;
    logo: string | Media;
    link?: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null)
        | ({
            relationTo: 'redirects';
            value: string | Redirect;
          } | null);
      url?: string | null;
    };
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'awards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StatsBlock".
 */
export interface StatsBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  stats?:
    | {
        label: string;
        value: number;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'stats';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GridBlock".
 */
export interface GridBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  size?: ('default' | 'large') | null;
  rows?:
    | {
        items?:
          | {
              title?: string | null;
              description?: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              background: {
                type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
                inverted?: boolean | null;
                dark?: boolean | null;
                backgroundImage?: (string | null) | Media;
                color?: string | null;
                colorStops?:
                  | {
                      color: string;
                      stop: number;
                      id?: string | null;
                    }[]
                  | null;
              };
              effect?: ('none' | 'appear' | 'zoom' | 'slide') | null;
              accentColor?: string | null;
              link?: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null)
                  | ({
                      relationTo: 'redirects';
                      value: string | Redirect;
                    } | null);
                url?: string | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'grid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BentoBlock".
 */
export interface BentoBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  items?:
    | {
        title?: string | null;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        background: {
          type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
          inverted?: boolean | null;
          dark?: boolean | null;
          backgroundImage?: (string | null) | Media;
          color?: string | null;
          colorStops?:
            | {
                color: string;
                stop: number;
                id?: string | null;
              }[]
            | null;
        };
        accentColor?: string | null;
        rowSpan?: number | null;
        colSpan?: number | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'redirects';
                value: string | Redirect;
              } | null);
          url?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'bento';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialsBlock".
 */
export interface TestimonialsBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  items: {
    name: string;
    role: string;
    quote?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    avatar?: (string | null) | Media;
    link?: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null)
        | ({
            relationTo: 'redirects';
            value: string | Redirect;
          } | null);
      url?: string | null;
    };
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'tstm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlock".
 */
export interface FAQBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  faqs: {
    question?: string | null;
    text?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'faq';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TeamBlock".
 */
export interface TeamBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  members: {
    name?: string | null;
    role?: string | null;
    bio?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    photo?: (string | null) | Media;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'team';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RelatedPostsBlock".
 */
export interface RelatedPostsBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  relatedPosts?: (string | Post)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'relatedPosts';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  form: string | Form;
  id?: string | null;
  blockName?: string | null;
  blockType: 'form';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  event?: ('submission' | 'registration') | null;
  mailchimpList?: string | null;
  mailchimpTags?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BrandBlock".
 */
export interface BrandBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  logos?:
    | {
        svgLogo: string | Media;
        pngLogo: string | Media;
        variant?: ('light' | 'dark') | null;
        id?: string | null;
      }[]
    | null;
  colors?:
    | {
        name: string;
        color: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'brand';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "JobsBlock".
 */
export interface JobsBlock {
  title?: string | null;
  heading: 'h2' | 'h3' | 'h4';
  subtitle?: string | null;
  text?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  titleSize?: ('xs' | 'sm' | 'default' | 'lg') | null;
  centered?: boolean | null;
  forceFullWidth?: boolean | null;
  background: {
    type: 'none' | 'color' | 'image' | 'verticalGradient' | 'horizontalGradient';
    inverted?: boolean | null;
    dark?: boolean | null;
    backgroundImage?: (string | null) | Media;
    color?: string | null;
    colorStops?:
      | {
          color: string;
          stop: number;
          id?: string | null;
        }[]
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'jobs';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobs".
 */
export interface Job {
  id: string;
  name: string;
  location?: string | null;
  salary?: string | null;
  type?: ('full-time' | 'part-time' | 'contract' | 'freelance' | 'internship') | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'jobs';
        value: string | Job;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        title?: T;
        description?: T;
        badges?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
        backgroundImage?: T;
      };
  layout?:
    | T
    | {
        text?: T | TextBlockSelect<T>;
        prose?: T | ProseBlockSelect<T>;
        cta?: T | CtaBlockSelect<T>;
        mlst?: T | MilestonesBlockSelect<T>;
        clients?: T | ClientsBlockSelect<T>;
        features?: T | FeaturesBlockSelect<T>;
        awards?: T | AwardsBlockSelect<T>;
        stats?: T | StatsBlockSelect<T>;
        grid?: T | GridBlockSelect<T>;
        bento?: T | BentoBlockSelect<T>;
        tstm?: T | TestimonialsBlockSelect<T>;
        faq?: T | FAQBlockSelect<T>;
        team?: T | TeamBlockSelect<T>;
        relatedPosts?: T | RelatedPostsBlockSelect<T>;
        form?: T | FormBlockSelect<T>;
        brand?: T | BrandBlockSelect<T>;
        jobs?: T | JobsBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  slug?: T;
  slugLock?: T;
  publishedAt?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock_select".
 */
export interface TextBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProseBlock_select".
 */
export interface ProseBlockSelect<T extends boolean = true> {
  content?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CtaBlock_select".
 */
export interface CtaBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MilestonesBlock_select".
 */
export interface MilestonesBlockSelect<T extends boolean = true> {
  title?: T;
  type?: T;
  items?:
    | T
    | {
        title?: T;
        date?: T;
        status?: T;
        text?: T;
        media?: T;
        id?: T;
      };
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ClientsBlock_select".
 */
export interface ClientsBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  clients?:
    | T
    | {
        logo?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturesBlock_select".
 */
export interface FeaturesBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  items?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AwardsBlock_select".
 */
export interface AwardsBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  awards?:
    | T
    | {
        issuer?: T;
        name?: T;
        logo?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StatsBlock_select".
 */
export interface StatsBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  stats?:
    | T
    | {
        label?: T;
        value?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GridBlock_select".
 */
export interface GridBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  size?: T;
  rows?:
    | T
    | {
        items?:
          | T
          | {
              title?: T;
              description?: T;
              background?:
                | T
                | {
                    type?: T;
                    inverted?: T;
                    dark?: T;
                    backgroundImage?: T;
                    color?: T;
                    colorStops?:
                      | T
                      | {
                          color?: T;
                          stop?: T;
                          id?: T;
                        };
                  };
              effect?: T;
              accentColor?: T;
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BentoBlock_select".
 */
export interface BentoBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  items?:
    | T
    | {
        title?: T;
        description?: T;
        background?:
          | T
          | {
              type?: T;
              inverted?: T;
              dark?: T;
              backgroundImage?: T;
              color?: T;
              colorStops?:
                | T
                | {
                    color?: T;
                    stop?: T;
                    id?: T;
                  };
            };
        accentColor?: T;
        rowSpan?: T;
        colSpan?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialsBlock_select".
 */
export interface TestimonialsBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  items?:
    | T
    | {
        name?: T;
        role?: T;
        quote?: T;
        avatar?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlock_select".
 */
export interface FAQBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  faqs?:
    | T
    | {
        question?: T;
        text?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TeamBlock_select".
 */
export interface TeamBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  members?:
    | T
    | {
        name?: T;
        role?: T;
        bio?: T;
        photo?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RelatedPostsBlock_select".
 */
export interface RelatedPostsBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  relatedPosts?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  form?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BrandBlock_select".
 */
export interface BrandBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  logos?:
    | T
    | {
        svgLogo?: T;
        pngLogo?: T;
        variant?: T;
        id?: T;
      };
  colors?:
    | T
    | {
        name?: T;
        color?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "JobsBlock_select".
 */
export interface JobsBlockSelect<T extends boolean = true> {
  title?: T;
  heading?: T;
  subtitle?: T;
  text?: T;
  titleSize?: T;
  centered?: T;
  forceFullWidth?: T;
  background?:
    | T
    | {
        type?: T;
        inverted?: T;
        dark?: T;
        backgroundImage?: T;
        color?: T;
        colorStops?:
          | T
          | {
              color?: T;
              stop?: T;
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  slug?: T;
  slugLock?: T;
  publishedAt?: T;
  editedAt?: T;
  thumbnail?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
        avatar?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  color?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "jobs_select".
 */
export interface JobsSelect<T extends boolean = true> {
  name?: T;
  location?: T;
  salary?: T;
  type?: T;
  description?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  thumbhash?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  firstName?: T;
  lastName?: T;
  avatar?: T;
  role?: T;
  policies?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  event?: T;
  mailchimpList?: T;
  mailchimpTags?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          icon?: (string | null) | Media;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'redirects';
                value: string | Redirect;
              } | null);
          url?: string | null;
          label: string;
          sublinks?:
            | {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  icon?: (string | null) | Media;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: string | Page;
                      } | null)
                    | ({
                        relationTo: 'posts';
                        value: string | Post;
                      } | null)
                    | ({
                        relationTo: 'redirects';
                        value: string | Redirect;
                      } | null);
                  url?: string | null;
                  label: string;
                };
                id?: string | null;
              }[]
            | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  groups?:
    | {
        title: string;
        groupItems?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null)
                  | ({
                      relationTo: 'redirects';
                      value: string | Redirect;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  legalLinks?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'redirects';
                value: string | Redirect;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company".
 */
export interface Company {
  id: string;
  socials?:
    | {
        social:
          | 'facebook'
          | 'twitter'
          | 'instagram'
          | 'linkedin'
          | 'github'
          | 'youtube'
          | 'pinterest'
          | 'tiktok'
          | 'snapchat'
          | 'telegram'
          | 'signal'
          | 'discord'
          | 'twitch'
          | 'reddit';
        link: string;
        id?: string | null;
      }[]
    | null;
  companyName: string;
  companyEmail: string;
  companyFoundingDate: string;
  companyAddress: {
    streetAddress: string;
    state: string;
    zip: string;
    country: string;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              icon?: T;
              reference?: T;
              url?: T;
              label?: T;
              sublinks?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          icon?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    id?: T;
                  };
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  groups?:
    | T
    | {
        title?: T;
        groupItems?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  legalLinks?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "company_select".
 */
export interface CompanySelect<T extends boolean = true> {
  socials?:
    | T
    | {
        social?: T;
        link?: T;
        id?: T;
      };
  companyName?: T;
  companyEmail?: T;
  companyFoundingDate?: T;
  companyAddress?:
    | T
    | {
        streetAddress?: T;
        state?: T;
        zip?: T;
        country?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('ts' | 'tsx' | 'js' | 'json' | 'css' | 'bash' | 'csharp') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}